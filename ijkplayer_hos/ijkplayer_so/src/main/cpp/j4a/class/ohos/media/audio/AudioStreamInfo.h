/*
 * Copyright (C) 2015 Zhang Rui <bbcallen@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * https://github.com/Bilibili/jni4android
 * This file is automatically generated by jni4android, do not modify.
 */

#ifndef J4A__ohos_media_audio_AudioStreamInfo__H
#define J4A__ohos_media_audio_AudioStreamInfo__H

#include "j4a/j4a_base.h"

jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__Builder(JNIEnv *env);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__Builder__catchAll(JNIEnv *env);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__Builder__asGlobalRef__catchAll(JNIEnv *env);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__encodingFormat(JNIEnv *env, jobject thiz, jobject inputEncodingFormat);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__encodingFormat__catchAll(JNIEnv *env, jobject thiz, jobject inputEncodingFormat);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__encodingFormat__asGlobalRef__catchAll(JNIEnv *env, jobject thiz, jobject inputEncodingFormat);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__sampleRate(JNIEnv *env, jobject thiz, jint inputSampleRate);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__sampleRate__catchAll(JNIEnv *env, jobject thiz, jint inputSampleRate);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__sampleRate__asGlobalRef__catchAll(JNIEnv *env, jobject thiz, jint inputSampleRate);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__channelMask(JNIEnv *env, jobject thiz, jobject inputChannelMask);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__channelMask__catchAll(JNIEnv *env, jobject thiz, jobject inputChannelMask);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__channelMask__asGlobalRef__catchAll(JNIEnv *env, jobject thiz, jobject inputChannelMask);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__streamUsage(JNIEnv *env, jobject thiz, jobject inputStreamUsage);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__streamUsage__catchAll(JNIEnv *env, jobject thiz, jobject inputStreamUsage);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__streamUsage__asGlobalRef__catchAll(JNIEnv *env, jobject thiz, jobject inputStreamUsage);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__audioStreamFlag(JNIEnv *env, jobject thiz, jobject flag);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__audioStreamFlag__catchAll(JNIEnv *env, jobject thiz, jobject flag);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__audioStreamFlag__asGlobalRef__catchAll(JNIEnv *env, jobject thiz, jobject flag);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__build(JNIEnv *env, jobject thiz);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__build__catchAll(JNIEnv *env, jobject thiz);
jobject J4AC_ohos_media_audio_AudioStreamInfo__Builder__build__asGlobalRef__catchAll(JNIEnv *env, jobject thiz);
int J4A_loadClass__J4AC_ohos_media_audio_AudioStreamInfo(JNIEnv *env);

#endif//J4A__ohos_media_audio_AudioStreamInfo__H
